* Cope with cropped scene elements?
  - It's possible to "crop" in the transform, or "crop/pad" as a filter, or add
    "crop" attributes to certain source types (incl window capture). Test all.
* Have a (one-shot? toggled?) way to grab an image from every source in the
  scene, thus giving a viable preview, not just a wireframe
  - Problematic with overlays - they're either going to show a constant image
    or stay permanently blank. Unideal in many other situations too.
* OBS-Studio b360168 added the ability to "lock volume". Check what that does.
  - Locked status is not transmitted by event. Should we (a) respect it, and
    (b) be able to toggle it?
* Sections asking for extra info
  - If a section's update() attempts to look at state.sources[*].transform.x, it
    will throw an exception.
    - Check that exception on multiple browsers - can we recognize consistently
      that it was looking for transform on a source?
  - This exception gets caught by sections::send_updates() or sections::build()
    and state.need_extra.transform is set. The section is still built (if we are
    in build()) and other sections are still processed exactly as normal.
  - In index::repaint() (don't worry about render - it's always followed by
    repaint), after sending updates, if anything is set in state.need_extra,
    fetch extra info and then re-send_updates.
  - Any incoming event message that provides suitable information should add it.
    Any message which does not conflict with such information should not remove.
  - A full_update will, most likely, cause a brief dance of "oops, need, fetch".
    These should be relatively uncommon in the scheme of things - only happening
    when you change scenes, add or remove elements, etc. It's probably not worth
    trying to remember which info categories are needed.

Grab CEF by using the same commands as in obs-studio/CI/linux/01_install_dependencies.sh
$ tar xjf cef_binary_4280_linux64.tar.bz2
Building CEF shouldn't be necessary since it comes with binaries, but if tweaks are
done, build with:
$ mkdir -p cef_binary_4280_linux64/build; cd cef_binary_4280_linux64/build
$ cmake ..; make -j6

Not currently using PipeWire. Remove ENABLE_PIPEWIRE=OFF if that becomes an option.

To test a new build of OBS while live:
$ cd obs-studio/build
$ rm -rf *; cmake -DUNIX_STRUCTURE=1 -DBUILD_BROWSER=ON -DCEF_ROOT_DIR="../../cef_binary_5060_linux64" -DENABLE_PIPEWIRE=OFF -DENABLE_AJA=OFF -DENABLE_SCRIPTING=OFF -DCMAKE_INSTALL_PREFIX=/home/rosuav/tmp/obs ..
$ make -j6 && make install
$ # If WS 4 is needed:
$ # cd obs-websocket/build
$ # rm -rf *; cmake -DLIBOBS_INCLUDE_DIR=/home/rosuav/obs-studio/libobs -DCMAKE_INSTALL_PREFIX=/home/rosuav/tmp/obs ..
$ # make -j6 && make install
$ cd /home/rosuav/tmp/obs
$ LD_LIBRARY_PATH=/home/rosuav/tmp/obs/lib bin/obs
$ cd /home/rosuav/obs-remote-volume; python3 -m http.server
http://localhost:8000/#@localhost:4445
